#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto update package
#
name: "Auto update package"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: "0 */4 * * *"
env:
  TZ: Asia/Shanghai


jobs:
  job_init:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 0

      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.13
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

  job_adguardhome:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check adguardhome
        id: check
        run: |
          cd && cd work/wall/wall/adguardhome 
          Old_PKG_VERSION=$(sed -n '9p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/AdguardTeam/AdGuardHome/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
              
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update adguardhome
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/adguardhome 
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "9c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p adguardhome && cd adguardhome
          wget -P / https://codeload.github.com/AdguardTeam/AdGuardHome/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/adguardhome 
          sed -i "15c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 adguardhome版本到: $New_PKG_VERSION"
          echo "adguardhome Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: adguardhome: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "adguardhome: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_alist:
    if: ${{ always() }}
    needs: job_adguardhome
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check alist
        id: check
        run: |
          cd && cd work/wall/wall/alist
          Old_PKG_VERSION=$(sed -n '10p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/alist-org/alist/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update alist
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/alist
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "10c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p alist && cd alist
          wget -P / https://codeload.github.com/alist-org/alist/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/alist
          sed -i "16c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 alist 版本到: $New_PKG_VERSION"
          echo "alist Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: alist: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "alist: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_gost:
    if: ${{ always() }}
    needs: job_alist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check gost
        id: check
        run: |
          cd && cd work/wall/wall/gost
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/ginuerzh/gost/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update gost
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/gost
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p gost && cd gost
          wget -P / https://codeload.github.com/ginuerzh/gost/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/gost
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 gost 版本到: $New_PKG_VERSION"
          echo "gost Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: gost: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "gost: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_mosdns:
    if: ${{ always() }}
    needs: job_gost
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check mosdns
        id: check
        run: |
          cd && cd work/wall/wall/mosdns
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          latest_commit="$(curl -s https://github.com/IrineSistiana/mosdns/commits/main | grep -E '"Copy the full SHA"' | awk -F 'value="' '{print $2}' | cut -b 1-7 | sed -n 1p)"
          New_PKG_VERSION=$latest_commit
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update mosdns
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/mosdns
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p mosdns && cd mosdns
          wget -P / https://codeload.github.com/IrineSistiana/mosdns/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/mosdns
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 mosdns 版本到: $New_PKG_VERSION"
          echo "mosdns Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: mosdns: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "mosdns: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_smartdns:
    if: ${{ always() }}
    needs: job_mosdns
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check smartdns
        id: check
        run: |
          cd && cd work/wall/wall/smartdns
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/pymumu/smartdns/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update smartdns
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/smartdns
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p smartdns && cd smartdns
          wget -P / https://codeload.github.com/pymumu/smartdns/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/smartdns
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 smartdns 版本到: $New_PKG_VERSION"
          echo "smartdns Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: smartdns: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "smartdns: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_upx:
    if: ${{ always() }}
    needs: job_smartdns
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check upx
        id: check
        run: |
          cd && cd work/wall/wall/upx
          Old_PKG_VERSION=$(sed -n '10p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/upx/upx/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update upx
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/upx
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "10c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p upx && cd upx
          wget -P / https://codeload.github.com/upx/upx/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/upx
          sed -i "16c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 upx 版本到: $New_PKG_VERSION"
          echo "upx Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: upx: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "upx: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_upx-static:
    if: ${{ always() }}
    needs: job_upx
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check upx-static
        id: check
        run: |
          cd && cd work/wall/wall/upx-static
          Old_PKG_VERSION=$(sed -n '6p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/upx/upx/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update upx-static
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/upx-static
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "6c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p upx-static && cd upx-static
          wget -P / https://codeload.github.com/upx/upx/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/upx-static
          sed -i "40c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 upx-static 版本到: $New_PKG_VERSION"
          echo "upx-static Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: upx-static: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "upx-static: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_UnblockNeteaseMusic:
    if: ${{ always() }}
    needs: job_upx-static
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check UnblockNeteaseMusic
        id: check
        run: |
          cd && cd work/wall/wall/UnblockNeteaseMusic
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/UnblockNeteaseMusic/server/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update UnblockNeteaseMusic
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/UnblockNeteaseMusic
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p UnblockNeteaseMusic && cd UnblockNeteaseMusic
          wget -P / https://codeload.github.com/UnblockNeteaseMusic/server/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/UnblockNeteaseMusic
          sed -i "15c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 UnblockNeteaseMusic 版本到: $New_PKG_VERSION"
          echo "UnblockNeteaseMusic Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: UnblockNeteaseMusic: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "UnblockNeteaseMusic: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_brook:
    if: ${{ always() }}
    needs: job_UnblockNeteaseMusic
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check brook
        id: check
        run: |
          cd && cd work/wall/wall/brook 
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/txthinking/brook/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
              
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update brook
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/brook 
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p brook && cd brook
          wget -P / https://codeload.github.com/txthinking/brook/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/brook 
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新brook版本到: $New_PKG_VERSION"
          echo "brook Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: brook: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "brook: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_hysteria:
    if: ${{ always() }}
    needs: job_brook
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check hysteria
        id: check
        run: |
          cd && cd work/wall/wall/hysteria
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/apernet/hysteria/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update hysteria
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/hysteria
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p hysteria && cd hysteria
          wget -P / https://codeload.github.com/apernet/hysteria/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/hysteria
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 hysteria 版本到: $New_PKG_VERSION"
          echo "hysteria Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: hysteria: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "hysteria: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_ipt2socks:
    if: ${{ always() }}
    needs: job_hysteria
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check ipt2socks
        id: check
        run: |
          cd && cd work/wall/wall/ipt2socks
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/zfl9/ipt2socks/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update ipt2socks
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/ipt2socks
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p ipt2socks && cd ipt2socks
          wget -P / https://codeload.github.com/zfl9/ipt2socks/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/ipt2socks
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 ipt2socks 版本到: $New_PKG_VERSION"
          echo "ipt2socks Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: ipt2socks: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "ipt2socks: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_microsocks:
    if: ${{ always() }}
    needs: job_ipt2socks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check microsocks
        id: check
        run: |
          cd && cd work/wall/wall/microsocks
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/rofl0r/microsocks/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update microsocks
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/microsocks
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p microsocks && cd microsocks
          wget -P / https://codeload.github.com/rofl0r/microsocks/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/microsocks
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 microsocks 版本到: $New_PKG_VERSION"
          echo "microsocks Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: microsocks: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "microsocks: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_sing-box:
    if: ${{ always() }}
    needs: job_microsocks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check sing-box
        id: check
        run: |
          cd && cd work/wall/wall/sing-box
          Old_PKG_VERSION=$(sed -n '9p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/SagerNet/sing-box/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update sing-box
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/sing-box
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "9c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p sing-box && cd sing-box
          wget -P / https://codeload.github.com/SagerNet/sing-box/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/sing-box
          sed -i "14c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 sing-box 版本到: $New_PKG_VERSION"
          echo "sing-box Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: sing-box: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "sing-box: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_trojan:
    if: ${{ always() }}
    needs: job_sing-box
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check trojan
        id: check
        run: |
          cd && cd work/wall/wall/trojan
          Old_PKG_VERSION=$(sed -n '10p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/trojan-gfw/trojan/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update trojan
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/trojan
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "10c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p trojan && cd trojan
          wget -P / https://codeload.github.com/trojan-gfw/trojan/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/trojan
          sed -i "15c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 trojan 版本到: $New_PKG_VERSION"
          echo "trojan Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: trojan: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "trojan: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_trojan-go:
    if: ${{ always() }}
    needs: job_trojan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'

      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"

      - name: Check trojan-go
        id: check
        run: |
          cd && cd work/wall/wall/trojan-go
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/p4gefau1t/trojan-go/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update trojan-go
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/trojan-go
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p trojan-go && cd trojan-go
          wget -P / https://codeload.github.com/p4gefau1t/trojan-go/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/trojan-go
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 trojan-go 版本到: $New_PKG_VERSION"
          echo "trojan-go Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: trojan-go: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "trojan-go: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_v2ray-core:
    if: ${{ always() }}
    needs: job_trojan-go
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check v2ray-core
        id: check
        run: |
          cd && cd work/wall/wall/v2ray-core
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/v2fly/v2ray-core/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;
      
      - name: Update v2ray-core
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/v2ray-core
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p v2ray-core && cd v2ray-core
          wget -P / https://codeload.github.com/v2fly/v2ray-core/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/v2ray-core
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 v2ray-core 版本到: $New_PKG_VERSION"
          echo "v2ray-core Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: v2ray-core: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "v2ray-core: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_v2ray-geoip:
    if: ${{ always() }}
    needs: job_v2ray-core
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check v2ray-geoip
        id: check
        run: |
          cd && cd work/wall/wall/v2ray-geodata
          Old_PKG_VERSION=$(sed -n '15p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/v2fly/geoip/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;


      - name: Update v2ray-geoip
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/v2ray-geodata
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "15c GEOIP_VER:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p v2ray-geoip && cd v2ray-geoip
          wget -P / https://github.com/v2fly/geoip/releases/download/$New_PKG_VERSION/geoip.dat
          PKG_HASH=$(sha256sum geoip.dat) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/v2ray-geodata
          sed -i "21c \  HASH:=$PKG_HASH" Makefile
          echo "已更新 geoip 版本到: $New_PKG_VERSION"
          echo "geoip Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: geoip: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "v2ray-geoip: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_v2ray-geosite:
    if: ${{ always() }}
    needs: job_v2ray-geoip
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check v2ray-geosite
        id: check
        run: |
          cd && cd work/wall/wall/v2ray-geodata
          Old_PKG_VERSION=$(sed -n '24p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/v2fly/domain-list-community/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;

      - name: Update v2ray-geosite
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/v2ray-geodata
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "24c GEOSITE_VER:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p v2ray-geosite && cd v2ray-geosite
          wget -P / https://github.com/v2fly/domain-list-community/releases/download/$New_PKG_VERSION/dlc.dat
          PKG_HASH=$(sha256sum dlc.dat) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/v2ray-geodata
          sed -i "30c \  HASH:=$PKG_HASH" Makefile
          echo "已更新 geosite 版本到: $New_PKG_VERSION"
          echo "geosite Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: geosite: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "v2ray-geosite: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_v2ray-plugin:
    if: ${{ always() }}
    needs: job_v2ray-geosite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check v2ray-plugin
        id: check
        run: |
          cd && cd work/wall/wall/v2ray-plugin
          Old_PKG_VERSION=$(sed -n '9p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/teddysun/v2ray-plugin/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;
      
      - name: Update v2ray-plugin
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/v2ray-plugin
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "9c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p v2ray-plugin && cd v2ray-plugin
          wget -P / https://codeload.github.com/teddysun/v2ray-plugin/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/v2ray-plugin
          sed -i "14c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 v2ray-plugin 版本到: $New_PKG_VERSION"
          echo "v2ray-plugin Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: v2ray-plugin: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "v2ray-plugin: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_xray-core:
    if: ${{ always() }}
    needs: job_v2ray-plugin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check xray-core
        id: check
        run: |
          cd && cd work/wall/wall/xray-core
          Old_PKG_VERSION=$(sed -n '4p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/XTLS/Xray-core/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;
      
      - name: Update xray-core
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/xray-core
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "4c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p xray-core && cd xray-core
          wget -P / https://codeload.github.com/XTLS/Xray-core/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/xray-core
          sed -i "9c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 xray-core 版本到: $New_PKG_VERSION"
          echo "xray-core Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: xray-core: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "xray-core: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_xray-plugin:
    if: ${{ always() }}
    needs: job_xray-core
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check xray-plugin
        id: check
        run: |
          cd && cd work/wall/wall/xray-plugin
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/teddysun/xray-plugin/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;
      
      - name: Update xray-plugin
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/xray-plugin
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p xray-plugin && cd xray-plugin
          wget -P / https://codeload.github.com/teddysun/xray-plugin/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/xray-plugin
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 xray-plugin 版本到: $New_PKG_VERSION"
          echo "xray-plugin Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: xray-plugin: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "xray-plugin: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_lua-neturl:
    if: ${{ always() }}
    needs: job_xray-plugin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check lua-neturl
        id: check
        run: |
          cd && cd work/wall/wall/lua-neturl
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/golgote/neturl/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;
      
      - name: Update lua-neturl
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/lua-neturl
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p lua-neturl && cd lua-neturl
          wget -P / https://codeload.github.com/golgote/neturl/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/lua-neturl
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 lua-neturl 版本到: $New_PKG_VERSION"
          echo "lua-neturl Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: lua-neturl: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "lua-neturl: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_redsocks2:
    if: ${{ always() }}
    needs: job_lua-neturl
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check redsocks2
        id: check
        run: |
          cd && cd work/wall/wall/redsocks2
          Old_PKG_VERSION=$(sed -n '12p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/semigodking/redsocks/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;
      
      - name: Update redsocks2
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/redsocks2
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "12c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p redsocks2 && cd redsocks2
          wget -P / https://codeload.github.com/semigodking/redsocks/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/redsocks2
          sed -i "19c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 redsocks2 版本到: $New_PKG_VERSION"
          echo "redsocks2 Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: redsocks2: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "redsocks2: update to ${{ steps.update.outputs.version }}"
          branch: main
          
  job_lucky:
    if: ${{ always() }}
    needs: job_redsocks2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check lucky
        id: check
        run: |
          cd && cd work/wall/wall/lucky
          Old_PKG_VERSION=$(sed -n '11p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/gdy666/lucky/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;
      
      - name: Update lucky
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/lucky
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "11c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p lucky && cd lucky
          wget -P / https://codeload.github.com/gdy666/lucky/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/lucky
          sed -i "48c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 lucky 版本到: $New_PKG_VERSION"
          echo "lucky Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: lucky: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "lucky: update to ${{ steps.update.outputs.version }}"
          branch: main
   
  job_filebrowser:
    if: ${{ always() }}
    needs: job_lucky
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check filebrowser
        id: check
        run: |
          cd && cd work/wall/wall/filebrowser
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/filebrowser/filebrowser/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;
      
      - name: Update filebrowser
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/filebrowser
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p filebrowser && cd filebrowser
          wget -P / https://codeload.github.com/filebrowser/filebrowser/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/filebrowser
          sed -i "14c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 filebrowser 版本到: $New_PKG_VERSION"
          echo "filebrowser Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: filebrowser: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "filebrowser: update to ${{ steps.update.outputs.version }}"
          branch: main

  job_v2raya:
    if: ${{ always() }}
    needs: job_filebrowser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: 'main'
      
      - name: Initialization environment
        run: |
          cd && mkdir -p main && cd main
          sudo timedatectl set-timezone "$TZ"
      
      - name: Check v2raya
        id: check
        run: |
          cd && cd work/wall/wall/v2raya
          Old_PKG_VERSION=$(sed -n '8p' Makefile | awk -F '=' '{print $2}')
          New_PKG_VERSION=$(wget -qO- -t5 -T5 "https://api.github.com/repos/v2rayA/v2rayA/releases" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' | awk -F 'v' '{print $2}')
          echo "目前版本: $Old_PKG_VERSION"
          echo "最新版本: $New_PKG_VERSION"
          
          if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ];then echo "status=failure" >> $GITHUB_OUTPUT; echo "版本为最新版本$New_PKG_VERSION,无需更新"; else echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  echo "status=success" >> $GITHUB_OUTPUT; fi;
      
      - name: Update v2raya
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd work/wall/wall/v2raya
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          sed -i "8c PKG_VERSION:=$New_PKG_VERSION" Makefile
          cd && cd main && mkdir -p v2raya && cd v2raya
          wget -P / https://codeload.github.com/v2rayA/v2rayA/tar.gz/v$New_PKG_VERSION
          PKG_HASH=$(sha256sum v$New_PKG_VERSION) && PKG_HASH=${PKG_HASH%% *}
          cd && cd work/wall/wall/v2raya
          sed -i "13c PKG_HASH:=$PKG_HASH" Makefile
          echo "已更新 v2raya 版本到: $New_PKG_VERSION"
          echo "v2raya Hash:$PKG_HASH"
          cd && cd main
          echo ":white_check_mark: v2raya: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT
      
      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "v2raya: update to ${{ steps.update.outputs.version }}"
          branch: main          
